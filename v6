import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Plus, 
  Upload, 
  Edit2, 
  Trash2, 
  Send, 
  X, 
  Check, 
  Clock,
  CheckCircle,
  FileText,
  History,
  ChevronDown,
  ChevronRight,
  Calendar,
  DollarSign,
  Users,
  LogOut
} from 'lucide-react';
import ApiService from '../services/api';
import 'bootstrap/dist/css/bootstrap.min.css';

const Admin = () => {
  const [transactions, setTransactions] = useState([]);
  const [showBulkUpload, setShowBulkUpload] = useState(false);
  const [bulkTransactions, setBulkTransactions] = useState([]);
  const [editingRow, setEditingRow] = useState(null);
  const [pendingBatches, setPendingBatches] = useState([]);
  const [payrollHistory, setPayrollHistory] = useState([]);
  const [activeTab, setActiveTab] = useState('create');
  const [expandedBatch, setExpandedBatch] = useState(null);
  const [expandedHistoryBatch, setExpandedHistoryBatch] = useState(null);
  const [batchTransactions, setBatchTransactions] = useState({});
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [approvedBatches, setApprovedBatches] = useState(new Set());
  
  const fileInputRef = useRef();
  const navigate = useNavigate();

  const [singleForm, setSingleForm] = useState({
    userId: '',
    employeeName: '',
    amount: '',
    remarks: ''
  });

  const sidebarItems = [
    { id: 'create', label: 'Create Payroll', icon: FileText },
    { id: 'requests', label: 'Pending Approvals', icon: Clock },
    { id: 'history', label: 'Payroll History', icon: History }
  ];

  useEffect(() => {
    if (activeTab === 'requests') {
      loadPendingApprovals();
    } else if (activeTab === 'history') {
      loadPayrollHistory();
    }
  }, [activeTab]);

  const loadPendingApprovals = async () => {
    try {
      const batches = await ApiService.getPendingApprovals();
      setPendingBatches(batches);
    } catch (error) {
      setError(error.message);
    }
  };

  const loadPayrollHistory = async () => {
    try {
      const history = await ApiService.getPayrollHistory();
      setPayrollHistory(history);
    } catch (error) {
      setError(error.message);
    }
  };

  const loadBatchTransactions = async (batchReference) => {
    try {
      if (!batchTransactions[batchReference]) {
        const transactions = await ApiService.getBatchTransactions(batchReference);
        setBatchTransactions(prev => ({
          ...prev,
          [batchReference]: transactions
        }));
      }
    } catch (error) {
      setError('Failed to load batch transactions: ' + error.message);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  const handleSingleFormChange = (field, value) => {
    setSingleForm(prev => ({ ...prev, [field]: value }));
  };

  const addSingleTransaction = () => {
    if (Object.values(singleForm).every(field => field.toString().trim() !== '')) {
      const newTransaction = {
        id: Date.now(),
        userId: parseInt(singleForm.userId),
        employeeName: singleForm.employeeName,
        amount: parseFloat(singleForm.amount),
        remarks: singleForm.remarks
      };
      setTransactions(prev => [...prev, newTransaction]);
      setSingleForm({ userId: '', employeeName: '', amount: '', remarks: '' });
    } else {
      setError('All fields are required!');
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const text = e.target.result;
          const lines = text.split('\n');
          
          const parsedTransactions = lines.slice(1)
            .filter(line => line.trim())
            .map((line, index) => {
              const values = line.split(',').map(v => v.trim());
              return {
                id: Date.now() + index,
                userId: values[0] ? parseInt(values[0]) : '',
                employeeName: values[1] || '',
                amount: values[2] ? parseFloat(values[2]) : '',
                remarks: values[3] || '',
                isValid: values.length >= 4 && values.every(v => v && v.trim())
              };
            });

          setBulkTransactions(parsedTransactions);
          setShowBulkUpload(true);
        } catch (error) {
          setError('Error parsing CSV file');
        }
      };
      reader.readAsText(file);
    }
  };

  const sendForApproval = async () => {
    if (transactions.length === 0) {
      setError('No transactions to send for approval');
      return;
    }

    try {
      setLoading(true);
      const response = await ApiService.createPayrollBatch(transactions);
      setMessage(`Batch ${response.batchReference} sent for approval!`);
      setTransactions([]);
      setError('');
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const approveBatch = async (batchReference) => {
    try {
      setApprovedBatches(prev => new Set([...prev, batchReference]));
      const response = await ApiService.approveBatch(batchReference);
      setMessage(response.message);
      loadPendingApprovals();
      if (response.fullyApproved) {
        loadPayrollHistory();
      }
    } catch (error) {
      setError(error.message);
      setApprovedBatches(prev => {
        const newSet = new Set(prev);
        newSet.delete(batchReference);
        return newSet;
      });
    }
  };

  const formatCurrency = (amount) => {
    return `â‚¹${amount.toLocaleString('en-IN')}`;
  };

  const formatDateTime = (dateTime) => {
    return new Date(dateTime).toLocaleString('en-IN');
  };

  const getTotalAmount = () => {
    return transactions.reduce((sum, t) => sum + t.amount, 0);
  };

  const deleteTransaction = (id) => {
    setTransactions(prev => prev.filter(t => t.id !== id));
  };

  const startEditing = (transaction) => {
    setEditingRow({ ...transaction });
  };

  const saveEdit = () => {
    if (Object.values(editingRow).every(field => 
      typeof field === 'number' || (typeof field === 'string' && field.trim() !== '')
    )) {
      const updatedRow = {
        ...editingRow,
        userId: parseInt(editingRow.userId),
        amount: parseFloat(editingRow.amount)
      };
      setTransactions(prev => 
        prev.map(t => t.id === editingRow.id ? updatedRow : t)
      );
      setEditingRow(null);
    } else {
      setError('All fields are required!');
    }
  };

  const renderCreateTab = () => (
    <div className="container-fluid">
      {/* Alert Messages */}
      {message && (
        <div className="alert alert-success alert-dismissible">
          {message}
          <button onClick={() => setMessage('')} className="btn-close"></button>
        </div>
      )}
      {error && (
        <div className="alert alert-danger alert-dismissible">
          {error}
          <button onClick={() => setError('')} className="btn-close"></button>
        </div>
      )}

      {/* Single Transaction Form */}
      <div className="card mb-4">
        <div className="card-header">
          <h5>Add Single Transaction</h5>
        </div>
        <div className="card-body">
          <div className="row g-3">
            <div className="col-md-3">
              <input
                type="number"
                placeholder="User ID"
                value={singleForm.userId}
                onChange={(e) => handleSingleFormChange('userId', e.target.value)}
                className="form-control"
              />
            </div>
            <div className="col-md-3">
              <input
                type="text"
                placeholder="Employee Name"
                value={singleForm.employeeName}
                onChange={(e) => handleSingleFormChange('employeeName', e.target.value)}
                className="form-control"
              />
            </div>
            <div className="col-md-2">
              <input
                type="number"
                placeholder="Amount"
                value={singleForm.amount}
                onChange={(e) => handleSingleFormChange('amount', e.target.value)}
                className="form-control"
              />
            </div>
            <div className="col-md-3">
              <input
                type="text"
                placeholder="Remarks"
                value={singleForm.remarks}
                onChange={(e) => handleSingleFormChange('remarks', e.target.value)}
                className="form-control"
              />
            </div>
            <div className="col-md-1">
              <button onClick={addSingleTransaction} className="btn btn-primary">
                Add
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Bulk Upload */}
      <div className="card mb-4">
        <div className="card-header">
          <h5>Bulk Upload</h5>
        </div>
        <div className="card-body text-center">
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            ref={fileInputRef}
            style={{ display: 'none' }}
          />
          <button onClick={() => fileInputRef.current?.click()} className="btn btn-secondary">
            Upload CSV
          </button>
          <p className="text-muted mt-2">Format: User ID, Employee Name, Amount, Remarks</p>
        </div>
      </div>

      {/* Transactions Table */}
      <div className="card">
        <div className="card-header">
          <div className="d-flex justify-content-between align-items-center">
            <h5>Current Batch ({transactions.length} transactions)</h5>
            {transactions.length > 0 && (
              <div className="d-flex gap-3">
                <span className="badge bg-success fs-6">
                  {formatCurrency(getTotalAmount())}
                </span>
                <button 
                  onClick={sendForApproval}
                  className="btn btn-success"
                  disabled={loading}
                >
                  {loading ? 'Sending...' : 'Send for Approval'}
                </button>
              </div>
            )}
          </div>
        </div>
        <div className="card-body p-0">
          {transactions.length > 0 ? (
            <div className="table-responsive">
              <table className="table table-hover mb-0">
                <thead className="table-primary">
                  <tr>
                    <th>User ID</th>
                    <th>Employee Name</th>
                    <th>Amount</th>
                    <th>Remarks</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {transactions.map(transaction => (
                    <tr key={transaction.id}>
                      <td>
                        {editingRow?.id === transaction.id ? (
                          <input
                            type="number"
                            value={editingRow.userId}
                            onChange={(e) => setEditingRow(prev => ({...prev, userId: e.target.value}))}
                            className="form-control form-control-sm"
                          />
                        ) : (
                          transaction.userId
                        )}
                      </td>
                      <td>
                        {editingRow?.id === transaction.id ? (
                          <input
                            type="text"
                            value={editingRow.employeeName}
                            onChange={(e) => setEditingRow(prev => ({...prev, employeeName: e.target.value}))}
                            className="form-control form-control-sm"
                          />
                        ) : (
                          transaction.employeeName
                        )}
                      </td>
                      <td>
                        {editingRow?.id === transaction.id ? (
                          <input
                            type="number"
                            value={editingRow.amount}
                            onChange={(e) => setEditingRow(prev => ({...prev, amount: parseFloat(e.target.value) || 0}))}
                            className="form-control form-control-sm"
                          />
                        ) : (
                          formatCurrency(transaction.amount)
                        )}
                      </td>
                      <td>
                        {editingRow?.id === transaction.id ? (
                          <input
                            type="text"
                            value={editingRow.remarks}
                            onChange={(e) => setEditingRow(prev => ({...prev, remarks: e.target.value}))}
                            className="form-control form-control-sm"
                          />
                        ) : (
                          transaction.remarks
                        )}
                      </td>
                      <td>
                        {editingRow?.id === transaction.id ? (
                          <div className="btn-group btn-group-sm">
                            <button onClick={saveEdit} className="btn btn-success">
                              <Check size={14} />
                            </button>
                            <button onClick={() => setEditingRow(null)} className="btn btn-secondary">
                              <X size={14} />
                            </button>
                          </div>
                        ) : (
                          <div className="btn-group btn-group-sm">
                            <button onClick={() => startEditing(transaction)} className="btn btn-primary">
                              <Edit2 size={14} />
                            </button>
                            <button onClick={() => deleteTransaction(transaction.id)} className="btn btn-danger">
                              <Trash2 size={14} />
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-5 text-muted">
              <FileText size={48} className="mb-3 opacity-50" />
              <p>No transactions added yet</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderRequestsTab = () => (
    <div className="container-fluid">
      <div className="card">
        <div className="card-header">
          <h5>Pending Approvals</h5>
        </div>
        <div className="card-body">
          {pendingBatches.length > 0 ? (
            <div className="row g-3">
              {pendingBatches.map(batch => (
                <div key={batch.batchReference} className="col-12">
                  <div className="card border">
                    <div 
                      className="card-header cursor-pointer"
                      onClick={async () => {
                        if (expandedBatch === batch.batchReference) {
                          setExpandedBatch(null);
                        } else {
                          setExpandedBatch(batch.batchReference);
                          await loadBatchTransactions(batch.batchReference);
                        }
                      }}
                    >
                      <div className="d-flex justify-content-between align-items-center">
                        <div>
                          <h6>{batch.batchReference}</h6>
                          <div className="d-flex gap-3 small text-muted">
                            <span>{formatDateTime(batch.createdAt)}</span>
                            <span>{formatCurrency(batch.totalAmount)}</span>
                            <span>{batch.totalTransactions} transactions</span>
                            <span>Approvals needed: {batch.requiredApprovals}</span>
                          </div>
                        </div>
                        <div className="d-flex align-items-center gap-2">
                          <span className="badge bg-warning">Pending</span>
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              approveBatch(batch.batchReference);
                            }}
                            className="btn btn-success btn-sm"
                            disabled={approvedBatches.has(batch.batchReference)}
                          >
                            {approvedBatches.has(batch.batchReference) ? 'Approved' : 'Approve'}
                          </button>
                          {expandedBatch === batch.batchReference ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                        </div>
                      </div>
                    </div>
                    
                    {expandedBatch === batch.batchReference && (
                      <div className="card-body">
                        <h6>Transactions in this batch:</h6>
                        {batchTransactions[batch.batchReference] ? (
                          <div className="table-responsive">
                            <table className="table table-sm">
                              <thead>
                                <tr>
                                  <th>Employee Name</th>
                                  <th>User ID</th>
                                  <th>Amount</th>
                                  <th>Remarks</th>
                                </tr>
                              </thead>
                              <tbody>
                                {batchTransactions[batch.batchReference].map(txn => (
                                  <tr key={txn.transactionId}>
                                    <td>{txn.employeeName}</td>
                                    <td>{txn.userId}</td>
                                    <td>{formatCurrency(txn.amount)}</td>
                                    <td>{txn.remarks}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        ) : (
                          <div className="text-center py-3">
                            <div className="spinner-border spinner-border-sm" role="status"></div>
                            <p className="mt-2">Loading transactions...</p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-5 text-muted">
              <Clock size={48} className="mb-3 opacity-50" />
              <p>No pending approval requests</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderHistoryTab = () => (
    <div className="container-fluid">
      <div className="card">
        <div className="card-header">
          <h5>Payroll History</h5>
        </div>
        <div className="card-body">
          {payrollHistory.length > 0 ? (
            <div className="row g-3">
              {payrollHistory.map(batch => (
                <div key={batch.batchReference} className="col-12">
                  <div className="card border">
                    <div 
                      className="card-header cursor-pointer"
                      onClick={async () => {
                        if (expandedHistoryBatch === batch.batchReference) {
                          setExpandedHistoryBatch(null);
                        } else {
                          setExpandedHistoryBatch(batch.batchReference);
                          await loadBatchTransactions(batch.batchReference);
                        }
                      }}
                    >
                      <div className="d-flex justify-content-between align-items-center">
                        <div>
                          <h6>{batch.batchReference}</h6>
                          <div className="d-flex gap-3 small text-muted">
                            <span>{formatDateTime(batch.processedAt)}</span>
                            <span>{formatCurrency(batch.totalAmount)}</span>
                            <span>{batch.totalTransactions} transactions</span>
                          </div>
                        </div>
                        <div className="d-flex align-items-center gap-2">
                          <span className="badge bg-success">Approved</span>
                          {expandedHistoryBatch === batch.batchReference ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                        </div>
                      </div>
                    </div>
                    
                    {expandedHistoryBatch === batch.batchReference && (
                      <div className="card-body">
                        <h6>Transaction Details:</h6>
                        {batchTransactions[batch.batchReference] ? (
                          <div className="table-responsive">
                            <table className="table table-sm">
                              <thead>
                                <tr>
                                  <th>Employee Name</th>
                                  <th>User ID</th>
                                  <th>Amount</th>
                                  <th>Remarks</th>
                                  <th>Status</th>
                                </tr>
                              </thead>
                              <tbody>
                                {batchTransactions[batch.batchReference].map(txn => (
                                  <tr key={txn.transactionId}>
                                    <td>{txn.employeeName}</td>
                                    <td>{txn.userId}</td>
                                    <td>{formatCurrency(txn.amount)}</td>
                                    <td>{txn.remarks}</td>
                                    <td><span className="badge bg-success">{txn.status}</span></td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        ) : (
                          <div className="text-center py-3">
                            <div className="spinner-border spinner-border-sm" role="status"></div>
                            <p className="mt-2">Loading transaction details...</p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-5 text-muted">
              <History size={48} className="mb-3 opacity-50" />
              <p>No payroll history available</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="d-flex">
      {/* Sidebar */}
      <div className="bg-white border-end shadow-sm" style={{width: '250px', minHeight: '100vh'}}>
        <div className="p-3">
          <h5>Payroll Admin</h5>
        </div>
        <nav className="p-3">
          {sidebarItems.map(item => (
            <button
              key={item.id}
              onClick={() => setActiveTab(item.id)}
              className={`btn w-100 mb-2 d-flex align-items-center justify-content-start ${
                activeTab === item.id ? 'btn-primary' : 'btn-outline-primary'
              }`}
            >
              <item.icon size={18} className="me-2" />
              {item.label}
            </button>
          ))}
          
          {/* Logout Button */}
          <div className="mt-4 pt-3 border-top">
            <button
              onClick={handleLogout}
              className="btn btn-outline-danger w-100 d-flex align-items-center justify-content-start"
            >
              <LogOut size={18} className="me-2" />
              Logout
            </button>
          </div>
        </nav>
      </div>

      {/* Main Content */}
      <div className="flex-grow-1 p-3 bg-light">
        {activeTab === 'create' && renderCreateTab()}
        {activeTab === 'requests' && renderRequestsTab()}
        {activeTab === 'history' && renderHistoryTab()}
      </div>

      {/* Bulk Upload Modal */}
      {showBulkUpload && (
        <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-xl">
            <div className="modal-content">
              <div className="modal-header">
                <h5>Review Bulk Upload</h5>
                <button onClick={() => setShowBulkUpload(false)} className="btn-close"></button>
              </div>
              <div className="modal-body">
                <div className="table-responsive">
                  <table className="table">
                    <thead>
                      <tr>
                        <th>Status</th>
                        <th>User ID</th>
                        <th>Employee Name</th>
                        <th>Amount</th>
                        <th>Remarks</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody>
                      {bulkTransactions.map(transaction => (
                        <tr key={transaction.id} className={!transaction.isValid ? 'table-danger' : ''}>
                          <td>
                            {transaction.isValid ? (
                              <Check size={16} className="text-success" />
                            ) : (
                              <X size={16} className="text-danger" />
                            )}
                          </td>
                          <td>{transaction.userId || '-'}</td>
                          <td>{transaction.employeeName || '-'}</td>
                          <td>{transaction.amount ? formatCurrency(transaction.amount) : '-'}</td>
                          <td>{transaction.remarks || '-'}</td>
                          <td>
                            <button
                              onClick={() => setBulkTransactions(prev => prev.filter(t => t.id !== transaction.id))}
                              className="btn btn-danger btn-sm"
                            >
                              <Trash2 size={14} />
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              <div className="modal-footer">
                <button onClick={() => setShowBulkUpload(false)} className="btn btn-secondary">
                  Cancel
                </button>
                <button 
                  onClick={() => {
                    const validTransactions = bulkTransactions
                      .filter(t => t.isValid)
                      .map(t => ({
                        ...t,
                        userId: parseInt(t.userId),
                        amount: parseFloat(t.amount)
                      }));
                    setTransactions(prev => [...prev, ...validTransactions]);
                    setShowBulkUpload(false);
                    setBulkTransactions([]);
                  }} 
                  className="btn btn-success"
                >
                  Add Valid ({bulkTransactions.filter(t => t.isValid).length})
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Admin;
