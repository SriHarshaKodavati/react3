# Admin Profile Settings - Complete Implementation

## Backend Implementation

### 1. Add Change Password Endpoint to AuthController2.java

Add this method to your existing `AuthController2.java`:

```java
@PostMapping("/change-password")
public ResponseEntity<?> changePassword(@RequestBody Map<String, String> passwordRequest,
                                       HttpServletRequest request) {
    try {
        Integer userId = (Integer) request.getAttribute("userId");
        String currentPassword = passwordRequest.get("currentPassword");
        String newPassword = passwordRequest.get("newPassword");
        
        if (currentPassword == null || newPassword == null) {
            throw new RuntimeException("Current password and new password are required");
        }
        
        if (newPassword.length() < 6) {
            throw new RuntimeException("New password must be at least 6 characters");
        }
        
        // Get current user
        User2 user = userService.getUserById(userId);
        
        // Verify current password
        if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
            throw new RuntimeException("Current password is incorrect");
        }
        
        // Update password
        String hashedNewPassword = passwordEncoder.encode(newPassword);
        user.setPassword(hashedNewPassword);
        user.setFailedAttempts(0); // Reset failed attempts
        userService.updateUser(user);
        
        Map<String, String> response = new HashMap<>();
        response.put("message", "Password changed successfully");
        
        return ResponseEntity.ok(response);
    } catch (RuntimeException e) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", e.getMessage());
        return ResponseEntity.status(400).body(errorResponse);
    }
}
```

### 2. Add Profile Endpoint to AuthController2.java

Add this method to get user profile:

```java
@GetMapping("/profile")
public ResponseEntity<?> getUserProfile(HttpServletRequest request) {
    try {
        Integer userId = (Integer) request.getAttribute("userId");
        User2 user = userService.getUserById(userId);
        
        // Create response without password
        Map<String, Object> profile = new HashMap<>();
        profile.put("id", user.getId());
        profile.put("username", user.getUsername());
        profile.put("email", user.getEmail());
        profile.put("firstName", user.getFirstName());
        profile.put("lastName", user.getLastName());
        profile.put("phone", user.getPhone());
        profile.put("userType", user.getUserType());
        profile.put("userDepartment", user.getUserDepartment());
        profile.put("country", user.getCountry());
        profile.put("status", user.getStatus());
        
        return ResponseEntity.ok(profile);
    } catch (RuntimeException e) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", e.getMessage());
        return ResponseEntity.status(404).body(errorResponse);
    }
}

@PutMapping("/profile")
public ResponseEntity<?> updateProfile(@RequestBody Map<String, String> profileData,
                                      HttpServletRequest request) {
    try {
        Integer userId = (Integer) request.getAttribute("userId");
        User2 user = userService.getUserById(userId);
        
        // Update allowed fields only
        if (profileData.get("firstName") != null) {
            user.setFirstName(profileData.get("firstName"));
        }
        if (profileData.get("lastName") != null) {
            user.setLastName(profileData.get("lastName"));
        }
        if (profileData.get("phone") != null) {
            user.setPhone(profileData.get("phone"));
        }
        if (profileData.get("email") != null) {
            // Check if email already exists
            if (!profileData.get("email").equals(user.getEmail()) && 
                userService.existsByEmail(profileData.get("email"))) {
                throw new RuntimeException("Email already exists");
            }
            user.setEmail(profileData.get("email"));
        }
        
        userService.updateUser(user);
        
        Map<String, String> response = new HashMap<>();
        response.put("message", "Profile updated successfully");
        
        return ResponseEntity.ok(response);
    } catch (RuntimeException e) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", e.getMessage());
        return ResponseEntity.status(400).body(errorResponse);
    }
}
```

## Frontend Implementation

### 1. Add API Methods to api.js

```javascript
// Add these methods to your existing api.js
async getUserProfile() {
  const response = await fetch(`${API_BASE_URL}/auth2/profile`, {
    method: 'GET',
    headers: this.getAuthHeaders()
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(errorText);
  }

  return await response.json();
}

async updateProfile(profileData) {
  const response = await fetch(`${API_BASE_URL}/auth2/profile`, {
    method: 'PUT',
    headers: this.getAuthHeaders(),
    body: JSON.stringify(profileData)
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || 'Profile update failed');
  }

  return await response.json();
}

async changePassword(currentPassword, newPassword) {
  const response = await fetch(`${API_BASE_URL}/auth2/change-password`, {
    method: 'POST',
    headers: this.getAuthHeaders(),
    body: JSON.stringify({
      currentPassword: currentPassword,
      newPassword: newPassword
    })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || 'Password change failed');
  }

  return await response.json();
}
```

### 2. Settings Component

```javascript
// src/components/Settings.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ApiService from '../services/api';
import 'bootstrap/dist/css/bootstrap.min.css';

const Settings = () => {
  const [activeTab, setActiveTab] = useState('profile');
  const [profile, setProfile] = useState({});
  const [profileForm, setProfileForm] = useState({});
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    loadProfile();
  }, []);

  const loadProfile = async () => {
    try {
      setLoading(true);
      const profileData = await ApiService.getUserProfile();
      setProfile(profileData);
      setProfileForm(profileData);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleProfileUpdate = async (e) => {
    e.preventDefault();
    setSaving(true);
    setMessage('');
    setError('');

    try {
      await ApiService.updateProfile(profileForm);
      setMessage('Profile updated successfully!');
      setProfile(profileForm);
      
      // Update localStorage if needed
      localStorage.setItem('fullName', `${profileForm.firstName} ${profileForm.lastName}`);
      localStorage.setItem('email', profileForm.email);
      
    } catch (error) {
      setError(error.message);
    } finally {
      setSaving(false);
    }
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    setSaving(true);
    setMessage('');
    setError('');

    // Validation
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      setError('New passwords do not match');
      setSaving(false);
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      setError('New password must be at least 6 characters');
      setSaving(false);
      return;
    }

    try {
      await ApiService.changePassword(passwordForm.currentPassword, passwordForm.newPassword);
      setMessage('Password changed successfully!');
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      setError(error.message);
    } finally {
      setSaving(false);
    }
  };

  const handleProfileInputChange = (e) => {
    setProfileForm({
      ...profileForm,
      [e.target.name]: e.target.value
    });
  };

  const handlePasswordInputChange = (e) => {
    setPasswordForm({
      ...passwordForm,
      [e.target.name]: e.target.value
    });
  };

  if (loading) {
    return (
      <div className="container mt-5 text-center">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <p className="mt-2">Loading profile...</p>
      </div>
    );
  }

  return (
    <div className="container mt-4">
      <div className="row">
        <div className="col-12">
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h2>Settings</h2>
            <button className="btn btn-secondary" onClick={() => navigate(-1)}>
              Back
            </button>
          </div>

          {/* Alert Messages */}
          {message && (
            <div className="alert alert-success alert-dismissible fade show" role="alert">
              {message}
              <button type="button" className="btn-close" onClick={() => setMessage('')}></button>
            </div>
          )}

          {error && (
            <div className="alert alert-danger alert-dismissible fade show" role="alert">
              {error}
              <button type="button" className="btn-close" onClick={() => setError('')}></button>
            </div>
          )}

          {/* Navigation Tabs */}
          <ul className="nav nav-tabs mb-4">
            <li className="nav-item">
              <button 
                className={`nav-link ${activeTab === 'profile' ? 'active' : ''}`}
                onClick={() => setActiveTab('profile')}
              >
                <i className="fas fa-user me-2"></i>
                Profile
              </button>
            </li>
            <li className="nav-item">
              <button 
                className={`nav-link ${activeTab === 'password' ? 'active' : ''}`}
                onClick={() => setActiveTab('password')}
              >
                <i className="fas fa-lock me-2"></i>
                Change Password
              </button>
            </li>
          </ul>

          {/* Profile Tab */}
          {activeTab === 'profile' && (
            <div className="card">
              <div className="card-header">
                <h5 className="mb-0">
                  <i className="fas fa-user me-2"></i>
                  Profile Information
                </h5>
              </div>
              <div className="card-body">
                <form onSubmit={handleProfileUpdate}>
                  <div className="row">
                    <div className="col-md-6 mb-3">
                      <label htmlFor="firstName" className="form-label">First Name</label>
                      <input
                        type="text"
                        className="form-control"
                        id="firstName"
                        name="firstName"
                        value={profileForm.firstName || ''}
                        onChange={handleProfileInputChange}
                        required
                      />
                    </div>
                    <div className="col-md-6 mb-3">
                      <label htmlFor="lastName" className="form-label">Last Name</label>
                      <input
                        type="text"
                        className="form-control"
                        id="lastName"
                        name="lastName"
                        value={profileForm.lastName || ''}
                        onChange={handleProfileInputChange}
                        required
                      />
                    </div>
                  </div>

                  <div className="row">
                    <div className="col-md-6 mb-3">
                      <label htmlFor="email" className="form-label">Email</label>
                      <input
                        type="email"
                        className="form-control"
                        id="email"
                        name="email"
                        value={profileForm.email || ''}
                        onChange={handleProfileInputChange}
                        required
                      />
                    </div>
                    <div className="col-md-6 mb-3">
                      <label htmlFor="phone" className="form-label">Phone</label>
                      <input
                        type="tel"
                        className="form-control"
                        id="phone"
                        name="phone"
                        value={profileForm.phone || ''}
                        onChange={handleProfileInputChange}
                      />
                    </div>
                  </div>

                  <div className="row">
                    <div className="col-md-4 mb-3">
                      <label htmlFor="username" className="form-label">Username</label>
                      <input
                        type="text"
                        className="form-control"
                        id="username"
                        value={profile.username || ''}
                        disabled
                      />
                      <small className="form-text text-muted">Username cannot be changed</small>
                    </div>
                    <div className="col-md-4 mb-3">
                      <label htmlFor="userType" className="form-label">Role</label>
                      <input
                        type="text"
                        className="form-control"
                        id="userType"
                        value={profile.userType || ''}
                        disabled
                      />
                    </div>
                    <div className="col-md-4 mb-3">
                      <label htmlFor="userDepartment" className="form-label">Department</label>
                      <input
                        type="text"
                        className="form-control"
                        id="userDepartment"
                        value={profile.userDepartment || ''}
                        disabled
                      />
                    </div>
                  </div>

                  <div className="row">
                    <div className="col-md-6 mb-3">
                      <label htmlFor="country" className="form-label">Country</label>
                      <input
                        type="text"
                        className="form-control"
                        id="country"
                        value={profile.country || ''}
                        disabled
                      />
                    </div>
                    <div className="col-md-6 mb-3">
                      <label htmlFor="status" className="form-label">Status</label>
                      <input
                        type="text"
                        className="form-control"
                        id="status"
                        value={profile.status || ''}
                        disabled
                      />
                    </div>
                  </div>

                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={saving}
                  >
                    {saving ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                        Updating...
                      </>
                    ) : (
                      <>
                        <i className="fas fa-save me-2"></i>
                        Update Profile
                      </>
                    )}
                  </button>
                </form>
              </div>
            </div>
          )}

          {/* Password Tab */}
          {activeTab === 'password' && (
            <div className="card">
              <div className="card-header">
                <h5 className="mb-0">
                  <i className="fas fa-lock me-2"></i>
                  Change Password
                </h5>
              </div>
              <div className="card-body">
                <form onSubmit={handlePasswordChange}>
                  <div className="mb-3">
                    <label htmlFor="currentPassword" className="form-label">Current Password</label>
                    <input
                      type="password"
                      className="form-control"
                      id="currentPassword"
                      name="currentPassword"
                      value={passwordForm.currentPassword}
                      onChange={handlePasswordInputChange}
                      required
                    />
                  </div>

                  <div className="mb-3">
                    <label htmlFor="newPassword" className="form-label">New Password</label>
                    <input
                      type="password"
                      className="form-control"
                      id="newPassword"
                      name="newPassword"
                      value={passwordForm.newPassword}
                      onChange={handlePasswordInputChange}
                      minLength="6"
                      required
                    />
                    <small className="form-text text-muted">Password must be at least 6 characters</small>
                  </div>

                  <div className="mb-3">
                    <label htmlFor="confirmPassword" className="form-label">Confirm New Password</label>
                    <input
                      type="password"
                      className="form-control"
                      id="confirmPassword"
                      name="confirmPassword"
                      value={passwordForm.confirmPassword}
                      onChange={handlePasswordInputChange}
                      required
                    />
                  </div>

                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={saving}
                  >
                    {saving ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                        Changing...
                      </>
                    ) : (
                      <>
                        <i className="fas fa-key me-2"></i>
                        Change Password
                      </>
                    )}
                  </button>
                </form>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;
```

### 3. Add Route to DashboardApp.js

Add this route to your existing routes in `DashboardApp.js`:

```javascript
<Route path='/settings' element={<Settings />} />
```

### 4. Add Settings Link to Navigation

In your navigation component, add a settings link:

```javascript
<li className="nav-item">
  <Link 
    className={`nav-link ${location.pathname === '/settings' ? 'active' : ''}`}
    to="/settings"
  >
    <i className="fas fa-cog me-1"></i>
    Settings
  </Link>
</li>
```

## Testing Instructions

1. **Backend Testing**:
   - Start your Spring Boot application
   - Login as manager to get JWT token
   - Test profile endpoint: `GET /api/auth2/profile`
   - Test password change: `POST /api/auth2/change-password`

2. **Frontend Testing**:
   - Login and navigate to `/settings`
   - View profile information
   - Update profile details
   - Change password with current/new/confirm

3. **Security Features**:
   - Current password verification before change
   - Password length validation
   - Email uniqueness check
   - Only editable fields can be updated

The implementation provides a complete admin settings interface with profile management and secure password change functionality.
